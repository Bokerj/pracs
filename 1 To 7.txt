Practical no – 01
Aim :- Setup DirectX 11, Window Framework and Initialize Direct3D Device
CODE:-
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Microsoft.DirectX;
using Microsoft.DirectX.Direct3D;

namespace GAURAV_WADEKAR_TYCS_112
{
    public partial class Form1 : Form
    {
        Microsoft.DirectX.Direct3D.Device device;
        public Form1()
        {
            InitializeComponent();
            InitDevice();
        }

        private void InitDevice()
        {
            PresentParameters pp = new PresentParameters();
            pp.Windowed = true;
            pp.SwapEffect = SwapEffect.Discard;
            device = new Device(0, DeviceType.Hardware, this, CreateFlags.HardwareVertexProcessing, pp);

        }
        private void Render()
        {
            device.Clear(ClearFlags.Target, Color.Blue, 0, 1);
            device.Present();
        }


        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            Render();
        }
    }
}
-----------------------------------------------------------------------------------------------------------

Practical no – 02
Aim :- Buffers, Shaders and HLSL (Draw a triangle using Direct3D 11)
CODE:-
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Microsoft.DirectX;

using Microsoft.DirectX.Direct3D;

namespace Gaurav_Wadekar_TYCS_112__prac_2_
{
    public partial class Form1 : Form
    {
        Microsoft.DirectX.Direct3D.Device device;
        private CustomVertex.PositionColored[] vertex = new CustomVertex.PositionColored[4];

        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            PresentParameters pp = new PresentParameters();
            pp.Windowed = true;

            pp.SwapEffect = SwapEffect.Discard;

            device = new Device(0, DeviceType.Hardware, this, CreateFlags.HardwareVertexProcessing, pp);
            device.Transform.Projection = Matrix.PerspectiveFovLH(3.14f / 4, device.Viewport.Width /
            device.Viewport.Height, 1f, 1000f);
            device.Transform.View = Matrix.LookAtLH(new Vector3(0, 0, 20), new Vector3(), new Vector3(0,
            1, 0));
            device.RenderState.Lighting = false;
            vertex[0] = new CustomVertex.PositionColored(new Vector3(), Color.Red.ToArgb());
            vertex[1] = new CustomVertex.PositionColored(new Vector3(5, 0, 0), Color.Red.ToArgb());
            vertex[2] = new CustomVertex.PositionColored(new Vector3(0, 5, 0), Color.Red.ToArgb());
            vertex[3] = new CustomVertex.PositionColored(new Vector3(5, 0, 0), Color.Red.ToArgb());

        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            device.Clear(ClearFlags.Target, Color.CornflowerBlue, 1, 0);
            device.BeginScene();
            device.VertexFormat = CustomVertex.PositionColored.Format;
            device.DrawUserPrimitives(PrimitiveType.TriangleList, vertex.Length / 3, vertex);
            device.EndScene();
            device.Present();

        }
    }
}

---------------------------------------------------------------------------------------------------------------

Practical no – 03
Aim :- Buffers, Shaders and HLSL (Draw a Rectriangle using Direct3D 11)
CODE:-
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Microsoft.DirectX;

using Microsoft.DirectX.Direct3D;

namespace Gaurav_Wadekar_TYCS_112_PRAC_3
{
    public partial class Form1 : Form
    {
        Microsoft.DirectX.Direct3D.Device device;
        private CustomVertex.PositionColored[] vertex = new CustomVertex.PositionColored[6];

        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            PresentParameters pp = new PresentParameters();
            pp.Windowed = true;

            pp.SwapEffect = SwapEffect.Discard;

            device = new Device(0, DeviceType.Hardware, this, CreateFlags.HardwareVertexProcessing, pp);
            device.Transform.Projection = Matrix.PerspectiveFovLH(3.14f / 4, device.Viewport.Width /
            device.Viewport.Height, 1f, 1000f);
            device.Transform.View = Matrix.LookAtLH(new Vector3(0, 0, 20), new Vector3(), new Vector3(0,
            1, 0));
            device.RenderState.Lighting = false;
            vertex[0] = new CustomVertex.PositionColored(new Vector3(), Color.Red.ToArgb());
            vertex[1] = new CustomVertex.PositionColored(new Vector3(5, 0, 0), Color.Red.ToArgb());
            vertex[2] = new CustomVertex.PositionColored(new Vector3(0, 5, 0), Color.Red.ToArgb());
            vertex[3] = new CustomVertex.PositionColored(new Vector3(5, 0, 0), Color.Red.ToArgb());
            vertex[4] = new CustomVertex.PositionColored(new Vector3(5, 5, 0), Color.Red.ToArgb());
            vertex[5] = new CustomVertex.PositionColored(new Vector3(0, 5, 0), Color.Red.ToArgb());


        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {

            device.Clear(ClearFlags.Target, Color.CornflowerBlue, 1, 0);
            device.BeginScene();
            device.VertexFormat = CustomVertex.PositionColored.Format;
            device.DrawUserPrimitives(PrimitiveType.TriangleList, vertex.Length / 3, vertex);
            device.EndScene();
            device.Present();

        }
    }
}
-------------------------------------------------------------------------------------------------------------

Practical no – 04
Aim :- Texturing (Texture the Triangle using Direct 3D 11)
CODE:- 
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Microsoft.DirectX;

using Microsoft.DirectX.Direct3D;

namespace Gaurav_Wadekar_TYCS_112_PRAC4
{
    public partial class Form1 : Form
    {
        Microsoft.DirectX.Direct3D.Device device;
        private CustomVertex.PositionTextured[] vertex = new CustomVertex.PositionTextured[4];
        private Texture texture;


        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            PresentParameters pp = new PresentParameters();
            pp.Windowed = true;
            pp.SwapEffect = SwapEffect.Discard;

            device = new Device(0, DeviceType.Hardware, this, CreateFlags.HardwareVertexProcessing, pp);
            device.Transform.Projection = Matrix.PerspectiveFovLH(3.14f / 4, device.Viewport.Width /
            device.Viewport.Height, 1f, 1000f);
            device.Transform.View = Matrix.LookAtLH(new Vector3(0, 0, 20), new Vector3(), new Vector3(0, 1, 0));
            device.RenderState.Lighting = false;
            vertex[0] = new CustomVertex.PositionTextured(new Vector3(), 0, 0);
            vertex[1] = new CustomVertex.PositionTextured(new Vector3(5, 0, 0), -1, 0);
            vertex[2] = new CustomVertex.PositionTextured(new Vector3(0, 5, 0), 0, -1);
            vertex[3] = new CustomVertex.PositionTextured(new Vector3(5, 0, 0), -1, 0);
            //vertex[4] = new CustomVertex.PositionTextured(new Vector3(5, 5, 0), -1, -1);
            //vertex[5] = new CustomVertex.PositionTextured(new Vector3(0, 5, 0), 0, -1);
            texture = new Texture(device, new Bitmap("C:\\Users\\Gaurav\\Documents\\Visual Studio 2010\\Projects\\Gaurav Wadekar TYCS 112 PRAC4\\odi.jpg"), 0, Pool.Managed);
        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {

            device.Clear(ClearFlags.Target, Color.CornflowerBlue, 1, 0);
            device.BeginScene();
            device.SetTexture(0, texture);
            device.VertexFormat = CustomVertex.PositionTextured.Format;
            device.DrawUserPrimitives(PrimitiveType.TriangleList, vertex.Length / 3, vertex);
            device.EndScene();
            device.Present();
        }
    }
}
----------------------------------------------------------------------------------------------------------------------

Practical no – 05
Aim :- Lightning (Programmable Diffuse Lightning using Direct3D 11)
CODE:-
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Microsoft.DirectX;

using Microsoft.DirectX.Direct3D;

namespace Gaurav_Wadekar_TYCS_112_Prac_5
{
    public partial class Form1 : Form
    {
        Microsoft.DirectX.Direct3D.Device device;
        private CustomVertex.PositionTextured[] vertex = new CustomVertex.PositionTextured[6];
        private Texture texture;

        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            PresentParameters pp = new PresentParameters();
            pp.Windowed = true;
            pp.SwapEffect = SwapEffect.Discard;

            device = new Device(0, DeviceType.Hardware, this, CreateFlags.HardwareVertexProcessing, pp);
            device.Transform.Projection = Matrix.PerspectiveFovLH(3.14f / 4, device.Viewport.Width /
            device.Viewport.Height, 1f, 1000f);
            device.Transform.View = Matrix.LookAtLH(new Vector3(0, 0, 20), new Vector3(), new Vector3(0, 1, 0));
            device.RenderState.Lighting = false;
            vertex[0] = new CustomVertex.PositionTextured(new Vector3(), 0, 0);
            vertex[1] = new CustomVertex.PositionTextured(new Vector3(5, 0, 0), -1, 0);
            vertex[2] = new CustomVertex.PositionTextured(new Vector3(0, 5, 0), 0, -1);
            vertex[3] = new CustomVertex.PositionTextured(new Vector3(5, 0, 0), -1, 0);
            vertex[4] = new CustomVertex.PositionTextured(new Vector3(5, 5, 0), -1, -1);
            vertex[5] = new CustomVertex.PositionTextured(new Vector3(0, 5, 0), 0, -1);
            texture = new Texture(device, new Bitmap("C:\\Users\\Gaurav\\Documents\\Visual Studio 2010\\Projects\\Gaurav Wadekar TYCS 112 Prac 5\\odi.jpg"), 0, Pool.Managed);

        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            device.Clear(ClearFlags.Target, Color.CornflowerBlue, 1, 0);
            device.BeginScene();
            device.SetTexture(0, texture);
            device.VertexFormat = CustomVertex.PositionTextured.Format;
            device.DrawUserPrimitives(PrimitiveType.TriangleList, vertex.Length / 3, vertex);
            device.EndScene();
            device.Present();

        }
    }
}
---------------------------------------------------------------------------------------------------------------------------------

Practical no – 06
Aim :- Specular Lightning (Programmable Spot Lightning using Direct3D 11)
CODE:-
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Microsoft.DirectX;

using Microsoft.DirectX.Direct3D;

namespace Gaurav_Wadekar_TYCS_112_PRAC6
{
    public partial class Form1 : Form
    {
        Microsoft.DirectX.Direct3D.Device device;
        CustomVertex.PositionNormalColored[] vertex = new CustomVertex.PositionNormalColored[3];

        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {

            PresentParameters pp = new PresentParameters();
            pp.Windowed = true;

            pp.SwapEffect = SwapEffect.Discard;

            device = new Device(0, DeviceType.Hardware, this, CreateFlags.HardwareVertexProcessing, pp);
            device.Transform.Projection = Matrix.PerspectiveFovLH(3.14f / 4, device.Viewport.Width / device.Viewport.Height, 1f, 1000f);
            device.Transform.View = Matrix.LookAtLH(new Vector3(0, 0, 10), new Vector3(), new Vector3(0, 1, 0));
            device.RenderState.Lighting = false;
            vertex[0] = new CustomVertex.PositionNormalColored(new Vector3(0, 1, 1), new Vector3(1, 0, 1), Color.Red.ToArgb());
            vertex[1] = new CustomVertex.PositionNormalColored(new Vector3(-1, -1, 1), new Vector3(1, 0, 1), Color.Red.ToArgb());
            vertex[2] = new CustomVertex.PositionNormalColored(new Vector3(1, -1, 1), new Vector3(-1, 0, 1), Color.Red.ToArgb());

            device.RenderState.Lighting = true;
            device.Lights[0].Type = LightType.Directional;

            device.Lights[0].Diffuse = Color.Plum;
            device.Lights[0].Direction = new Vector3(0.8f, 0, -1);
            device.Lights[0].Enabled = true;

        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            device.Clear(ClearFlags.Target, Color.CornflowerBlue, 1.0f, 0);
            device.BeginScene();
            device.VertexFormat = CustomVertex.PositionNormalColored.Format;
            device.DrawUserPrimitives(PrimitiveType.TriangleList, vertex.Length / 3, vertex);
            device.EndScene();

            device.Present();

        }
    }
}
------------------------------------------------------------------------------------------------------------------

Practical no – 07
Aim :- Loading models into DirectX 11 and rendering.
CODE:-
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Microsoft.DirectX;

using Microsoft.DirectX.Direct3D;


namespace Gaurav_Wadekar_TYCS_112_PRAC7
{
    public partial class Form1 : Form
    {
        Microsoft.DirectX.Direct3D.Device device;

        Microsoft.DirectX.Direct3D.Texture texture;

        Microsoft.DirectX.Direct3D.Font font;

        public Form1()
        {
            InitializeComponent();

            InitDevice();

            InitFont();

            LoadTexture();
        }

        private void InitDevice()
        {
            PresentParameters pp = new PresentParameters();

            pp.Windowed = true;

            pp.SwapEffect = SwapEffect.Discard;
            device = new Device(0, DeviceType.Hardware, this, CreateFlags.HardwareVertexProcessing, pp);
        }

        private void InitFont()
        {
            System.Drawing.Font f = new System.Drawing.Font("Arial", 28f, FontStyle.Regular);
            font = new Microsoft.DirectX.Direct3D.Font(device, f);
        }

        private void LoadTexture()
        {
            texture = TextureLoader.FromFile(device, "C:\\Users\\Gaurav\\Documents\\Visual Studio 2010\\Projects\\Gaurav Wadekar TYCS 112 PRAC7\\odi.jpg", 400, 400, 1, 0, Format.A8B8G8R8, Pool.Managed, Filter.Point, Filter.Point, Color.Transparent.ToArgb());
        }

        private void Render()
        {

            device.Clear(ClearFlags.Target, Color.CornflowerBlue, 0, 1);
            device.BeginScene();

            using (Sprite s = new Sprite(device))
            {

                s.Begin(SpriteFlags.AlphaBlend);
                s.Draw2D(texture, new Rectangle(0, 0, 0, 0), new Rectangle(0, 0, device.Viewport.Width, device.Viewport.Height), new Point(0, 0), 0f, new Point(0, 0), Color.White);

                font.DrawText(s, "adidas", new Point(0, 0), Color.White);

                s.End();

            }

            device.EndScene();
            device.Present();

        }


        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            Render();

        }
    }
}
----------------------------------------------------------------------------------------------------------------------